// Module dependencies
var async = require('async');
var http = require('http');
var querystring = require('querystring');

var UserDAO = require('../internal/dao').users;
var TokenDAO = require('../internal/dao').tokens;

exports.get = function (userId, callback) {

	async.waterfall([
		function getUserToken (done) {
			TokenDAO.get(userId, done);
		},
		function getUserInfo (token, done) {
			UserDAO.get(token, done);
		}
	], callback);

};

exports.createIfNotExists = function (user, callback) {

	// Check email adress
	// If not already used -> create the user

	async.waterfall([
		function _checkEmail (done) {
			checkEmail(user.email,done);
		},
		function _createUserIfNeeded (email_available, done) {
			// Email already used --> user already exists
			if (!email_available) { return done(); }

			// The email is availbale --> the user does not exists yet
			createUser(user.email, 'test', 'Prenom_test', 'Nom_test', done);
		}
	], function (err) {
		return callback(err);
	});
};

/**
*	Check if the email is available on the Doodle-like app
**/
var checkEmail = function (email, callback) {
	
	var options = {
		host: '127.0.0.1',
		port: 3000,
		path: '/api/user/checkEmail?email=' + email,
		method:'GET',
		headers: {
			'Content-Type': 'application/x-www-form-urlencoded'
		}
	};

	var response = '';
	var req = http.request(options, function (res) {

		res.on('data', function (chunk) {
			response += chunk;
		});

		res.on('end', function () {

			// Parse the response to json
			response = JSON.parse(response);

			if (response.type === 'error') {
				return callback(response.response);
			}

			return callback(null, response.response === 'available');
		});
	});

	req.end();
};

/**
*	Create the user on the Doodle-like app
**/
var createUser = function (email, password, first_name, last_name, callback) {

	var data = JSON.stringify({
		'email': email,
		'password': password,
		'first_name': first_name,
		'last_name': last_name
	});

	var options = {
		host: '127.0.0.1',
		port: 3000,
		path: '/api/user',
		method:'POST',
		headers: {
			'Content-Type': 'application/json',
			'Content-length': data.length
		}
	};

	var response = '';
	var req = http.request(options, function (res) {

		res.on('data', function (chunk) {
			response += chunk;
		});

		res.on('end', function () {
			// Parse the response to json
			response = JSON.parse(response);
	
			if (response.type === 'error') {
				return callback(response.response);
			}

			return callback();
		});
	});

	req.write(data);
	req.end();
};


