var _ = require('underscore');
var assert = require('assert');
var temp = require('temp');
var async = require('async');

var Cassandra = require('oae-util/lib/cassandra');
var RestAPI = require('oae-rest');
var TestsUtil = require('oae-tests');
var TaskQueue = require('oae-util/lib/taskqueue');
var PreviewConstants = require('oae-preview-processor/lib/constants');

describe('Loodle create', function () {

    // Rest context that can be used every time we need to make a request as an anonymous user
    var anonymousRestContext = null;

    // Rest contexts that can be used every time we need to make a request as a tenant admin
    var camAdminRestContext = null;
    var gtAdminRestContext = null;

    // Rest context that can be used every time we need to make a request as a global admin
    var globalAdminRestContext = null;

    /**
     * Create a number of users that will be used inside of a test
     * @param  {Function(contexts)}  callback           Standard callback function
     * @param  {Object}              callback.contexts  Object where the keys are identifiers for the created users and the values are an
     *                                                  object with a user key containing the user object for the created user and a restContext key
     *                                                  containing the REST Context for that user
     */
    var setUpUsers = function(callback) {
        var contexts = {};
        var createUser = function(identifier, visibility, displayName) {
            var userId = TestsUtil.generateTestUserId(identifier);
            var email = TestsUtil.generateTestEmailAddress(null, global.oaeTests.tenants.cam.emailDomain);
            RestAPI.User.createUser(camAdminRestContext, userId, 'password', displayName, email, {'visibility' : visibility}, function(err, createdUser) {
                if (err) {
                    assert.fail('Could not create test user');
                }
                contexts[identifier] = {
                    'user': createdUser,
                    'restContext': TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, userId, 'password')
                };
                if (_.keys(contexts).length === 7) {
                    callback(contexts);
                }
            });
        };

        createUser('nicolaas', 'public', 'Nicolaas Matthijs');
        createUser('simon', 'loggedin', 'Simon Gaeremynck');
        createUser('bert', 'private', 'Bert Pareyn');
        createUser('branden', 'private', 'Branden Visser');
        createUser('anthony', 'public', 'Anthony Whyte');
        createUser('stuart', 'public', 'Stuart Freeman');
        createUser('ian', 'public', 'Ian Dolphin');
    };

    /**
     * Get loodle id
     *
     * @param contentId
     * @param callback
     */
    var getLoodleId = function (contentId, callback) {

        var query = 'SELECT "loodleId" FROM "LoodleIdByContent" WHERE "contentId" = ?';
        var parameters = [
            contentId
        ];

        Cassandra.runQuery(query, parameters, function (err, result) {
            if (err)
                return callback(err);

            if (result.length === 0)
                return callback(null, false);

            return callback(null, Cassandra.rowToHash(result[0]).loodleId);
        });

    };

    /**
     * Function that will fill up the anonymous and tenant admin REST context
     */
    before(function (callback) {
        // Fill up anonymous rest context
        anonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);

        // Fill up tenant admin rest contexts
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        gtAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.gt.host);

        // Fill up global admin rest context
        globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();

        // Log in the tenant admin so his cookie jar is set up appropriately. This is because TestsUtil.generateTestUsers
        // will concurrently try and create users, which causes race conditions when trying to authenticate the rest
        // context.
        RestAPI.User.getMe(camAdminRestContext, function(err, meObj) {
            assert.ok(!err);

            // Unbind the current handler, if any
            TaskQueue.unbind(PreviewConstants.MQ.TASK_REGENERATE_PREVIEWS, function(err) {
                assert.ok(!err);

                /*!
                 * Task handler that will just drain the queue.
                 *
                 * @see MQ#bind
                 */
                var _handleTaskDrain = function(data, mqCallback) {
                    // Simply callback, which acknowledges the message without doing anything.
                    mqCallback();
                };

                // Drain the queue
                TaskQueue.bind(PreviewConstants.MQ.TASK_REGENERATE_PREVIEWS, _handleTaskDrain, null, function(err) {
                    assert.ok(!err);
                    callback();
                });
            });
        });
    });

    /**
     * Function that will clean up any files that we have lingering around.
     */
    after(function () {
        temp.cleanup();
    });

    describe('create a private loodle with one user', function () {

        it('should create a loodle type content', function (callback) {

            setUpUsers(function (contexts) {
                RestAPI.Loodles.createLoodle(contexts['branden'].restContext, 'Mon super loodle', 'Test', 'private', [], [], [], function (err, data) {
                    assert.equal(err, null);
                    assert.equal(data.displayName, 'Mon super loodle');
                    assert.equal(data.description, 'Test');
                    assert.equal(data.resourceSubType, 'loodle');

                    return callback();
                });
            });

        });

        it('should create a private content', function (callback) {

            setUpUsers(function (contexts) {
                RestAPI.Loodles.createLoodle(contexts['branden'].restContext, 'Mon super loodle', 'Test', 'private', [], [], [], function (err, data) {
                    assert.equal(err, null);
                    assert.equal(data.visibility, 'private');

                    return callback();
                });
            });

        });

        it('should only be accessible by the user who created the loodle', function (callback) {

            setUpUsers(function (contexts) {
                RestAPI.Loodles.createLoodle(contexts['branden'].restContext, 'Mon super loodle', 'Test', 'private', [], [], [], function (err, data) {
                    if (err) return callback(err);

                    RestAPI.Content.getContent(contexts['branden'].restContext, data.id, function (err, content) {
                        assert.equal(err, null);
                        assert.equal(content.loodleData.currentUser.first_name, 'Branden');
                        assert.equal(content.loodleData.currentUser.last_name, 'Visser');
                        assert.equal(content.loodleData.currentUser.status, 'registred');

                        return callback();
                    });
                });
            });

        });

        it('should only have the user who created the loodle registred as a participant', function (callback) {

            setUpUsers(function (contexts) {
                RestAPI.Loodles.createLoodle(contexts['branden'].restContext, 'Mon super loodle', 'Test', 'private', [], [], [], function (err, data) {
                    if (err) return callback(err);

                    RestAPI.Content.getContent(contexts['branden'].restContext, data.id, function (err, content) {
                        assert.equal(err, null);
                        assert.equal(content.loodleData.users.length, 1);
                        assert.equal(content.loodleData.users[0].first_name, 'Branden');
                        assert.equal(content.loodleData.users[0].last_name, 'Visser');
                        assert.equal(content.loodleData.users[0].status, 'registred');

                        return callback();
                    });
                });
            });

        });

    });


    describe('create a tenant accessible loodle with one user', function () {

        it('should create a loodle type content', function (callback) {

            setUpUsers(function (contexts) {
                RestAPI.Loodles.createLoodle(contexts['branden'].restContext, 'Mon super loodle', 'Test', 'loggedin', [], [], [], function (err, data) {
                    assert.equal(err, null);
                    assert.equal(data.displayName, 'Mon super loodle');
                    assert.equal(data.description, 'Test');
                    assert.equal(data.resourceSubType, 'loodle');

                    return callback();
                });
            });

        });

        it('should created a loogedin content', function (callback) {

            setUpUsers(function (contexts) {
                RestAPI.Loodles.createLoodle(contexts['branden'].restContext, 'Mon super loodle', 'Test', 'loggedin', [], [], [], function (err, data) {
                    assert.equal(err, null);
                    assert.equal(data.visibility, 'loggedin');

                    return callback();
                });
            });

        });

        it('should be accessible by anyone in the tenant in read only mode - without adding them as participant', function (callback) {

            setUpUsers(function (contexts) {
                RestAPI.Loodles.createLoodle(contexts['branden'].restContext, 'Mon super loodle', 'Test', 'loggedin', [], [], [], function (err, data) {
                    if (err) return callback(err);

                    async.series({
                        firstGet: function (done) {
                            // Get the loodle content a first time to verify it is accessible any user in the tenant
                            RestAPI.Content.getContent(contexts['simon'].restContext, data.id, function (err, content) {
                                assert.equal(err, null);
                                assert.equal(content.displayName, 'Mon super loodle');
                                assert.equal(content.description, 'Test');
                                assert.equal(data.resourceSubType, 'loodle');

                                return done();
                            });
                        },
                        secondGet: function (done) {
                            // Get the loodle content a second time to check if the previous one didn't add the user as a participant
                            RestAPI.Content.getContent(contexts['simon'].restContext, data.id, function (err, content) {
                                assert.equal(err, null);
                                assert.equal(content.loodleData.users.length, 1);
                                assert.equal(content.loodleData.users[0].first_name, 'Branden');
                                assert.equal(content.loodleData.users[0].last_name, 'Visser');
                                assert.equal(content.loodleData.users[0].status, 'registred');

                                return done();
                            });
                        },
                        publicUser: function (done) {
                            RestAPI.Content.getContent(anonymousRestContext, data.id, function (err, content) {
                                assert.notEqual(err, null);
                                assert.equal(err.code, 401);
                                assert.equal(err.msg, 'The current user does not have access to this resource');

                                return done();
                            });
                        }
                    }, callback);
                });
            });

        });

    });

    describe('create a public loodle with one user', function () {

        it('should create a loodle type content', function (callback) {

            setUpUsers(function (contexts) {
                RestAPI.Loodles.createLoodle(contexts['branden'].restContext, 'Mon super loodle', 'Test', 'public', [], [], [], function (err, data) {
                    assert.equal(err, null);
                    assert.equal(data.displayName, 'Mon super loodle');
                    assert.equal(data.description, 'Test');
                    assert.equal(data.resourceSubType, 'loodle');

                    return callback();
                });
            });

        });

        it('should create a public content', function (callback) {

            setUpUsers(function (contexts) {
                RestAPI.Loodles.createLoodle(contexts['branden'].restContext, 'Mon super loodle', 'Test', 'public', [], [], [], function (err, data) {
                    assert.equal(err, null);
                    assert.equal(data.visibility, 'public');

                    return callback();
                });
            });

        });

        it('should be accessible by anyone in read only mode -- without adding them as participant', function (callback) {

            setUpUsers(function (contexts) {
                RestAPI.Loodles.createLoodle(contexts['branden'].restContext, 'Mon super loodle', 'Test', 'public', [], [], [], function (err, data) {
                    if (err) return callback(err);

                    async.series({
                        getByRandomUser : function (done) {
                            RestAPI.Content.getContent(contexts['simon'].restContext, data.id, function (err, content) {
                                assert.equal(err, null);
                                assert.equal(content.displayName, 'Mon super loodle');
                                assert.equal(content.description, 'Test');
                                assert.equal(data.resourceSubType, 'loodle');

                                return done();
                            });
                        },
                        getByAnonymous: function (done) {
                            RestAPI.Content.getContent(anonymousRestContext, data.id, function (err, content) {
                                assert.equal(err, null);
                                assert.equal(content.displayName, 'Mon super loodle');
                                assert.equal(content.description, 'Test');
                                assert.equal(data.resourceSubType, 'loodle');

                                return done();
                            });
                        },
                        checkLoodleData: function (done) {
                            RestAPI.Content.getContent(contexts['simon'].restContext, data.id, function (err, content) {
                                assert.equal(err, null);
                                assert.equal(content.loodleData.users.length, 1);
                                assert.equal(content.loodleData.users[0].first_name, 'Branden');
                                assert.equal(content.loodleData.users[0].last_name, 'Visser');
                                assert.equal(content.loodleData.users[0].status, 'registred');

                                return done();
                            });
                        }
                    }, callback);
                });
            });

        });

    });


    describe('create a private loodle with many users', function () {

        it('should create a loodle type content', function (callback) {

            setUpUsers(function (contexts) {
                RestAPI.Loodles.createLoodle(contexts['branden'].restContext, 'Mon super loodle', 'Test', 'private', [contexts['simon'].user.id], [contexts['stuart'].user.id], [], function (err, data) {
                    assert.equal(err, null);
                    assert.equal(data.displayName, 'Mon super loodle');
                    assert.equal(data.description, 'Test');
                    assert.equal(data.resourceSubType, 'loodle');

                    return callback();
                });
            });

        });

        it('should create a private content', function (callback) {

            setUpUsers(function (contexts) {
                RestAPI.Loodles.createLoodle(contexts['branden'].restContext, 'Mon super loodle', 'Test', 'private', [contexts['simon'].user.id], [contexts['stuart'].user.id], [], function (err, data) {
                    assert.equal(err, null);
                    assert.equal(data.visibility, 'private');

                    return callback();
                });
            });

        });

        it('should be accessible by all the users who have been explicitly invated and the user who created the loodle', function (callback) {

            setUpUsers(function (contexts) {
                RestAPI.Loodles.createLoodle(contexts['branden'].restContext, 'Mon super loodle', 'Test', 'private', [contexts['simon'].user.id], [contexts['stuart'].user.id], [], function (err, data) {
                    if (err) return callback(err);

                    async.parallel({
                        getByBranden: function (done) {
                            RestAPI.Content.getContent(contexts['branden'].restContext, data.id, function (err, content) {
                                assert.equal(err, null);
                                assert.equal(content.loodleData.currentUser.first_name, 'Branden');
                                assert.equal(content.loodleData.currentUser.last_name, 'Visser');
                                assert.equal(content.loodleData.currentUser.status, 'registred');

                                return done();
                            });
                        },
                        getBySimon: function (done) {
                            RestAPI.Content.getContent(contexts['simon'].restContext, data.id, function (err, content) {
                                assert.equal(err, null);
                                assert.equal(content.loodleData.currentUser.first_name, 'Simon');
                                assert.equal(content.loodleData.currentUser.last_name, 'Gaeremynck');
                                assert.equal(content.loodleData.currentUser.status, 'registred');

                                return done();
                            });
                        },
                        getByStuart: function (done) {
                            RestAPI.Content.getContent(contexts['stuart'].restContext, data.id, function (err, content) {
                                assert.equal(err, null);
                                assert.equal(content.loodleData.currentUser.first_name, 'Stuart');
                                assert.equal(content.loodleData.currentUser.last_name, 'Freeman');
                                assert.equal(content.loodleData.currentUser.status, 'registred');

                                return done();
                            });
                        },
                        getByRandom: function (done) {
                            RestAPI.Content.getContent(contexts['bert'].restContext, data.id, function (err, content) {
                                assert.notEqual(err, null);
                                assert.equal(err.code, 401);
                                assert.equal(err.msg, 'The current user does not have access to this resource');

                                return done();
                            });
                        }
                    }, callback);
                });
            });

        });

        it('should only have the users who have been explicitly invated and the user who created the loodle as participants', function (callback) {

            setUpUsers(function (contexts) {
                RestAPI.Loodles.createLoodle(contexts['branden'].restContext, 'Mon super loodle', 'Test', 'private', [contexts['simon'].user.id], [contexts['stuart'].user.id], [], function (err, data) {
                    if (err) return callback(err);

                    RestAPI.Content.getContent(contexts['branden'].restContext, data.id, function (err, content) {
                        assert.equal(err, null);

                        var users = _.pluck(content.loodleData.users, 'first_name');
                        assert.equal(users.length, 3);
                        assert.equal(_.contains(users, 'Branden'), true);
                        assert.equal(_.contains(users, 'Simon'), true);
                        assert.equal(_.contains(users, 'Stuart'), true);

                        return callback();
                    });
                });
            });

        });

    });


    describe('create a loodle in a folder', function () {

        it('should create a loodle type content in OAE');

        it('should create a loodle in the loodle application');

        it('should be accessible for all the users who have access to the folder in read only mode');

        it('should be accessible for all the users who have been explicitly invated and the user who created the loodle in administration mode');

    });


    describe('create a loodle in a folder within a group', function () {

        it('should create a loodle type content in OAE');

        it('should create a loodle in the loodle application');

        it('should be accessible for all the users who have access to the folder in read only mode');

        it('should be accessible for all the users who have been explicitly invated and the user who created the loodle in administration mode');

    });

    describe('create a loodle in many folders', function () {

        it('should create a loodle type content in OAE');

        it('should create a loodle in the loodle application');

        it('should be accessible for all the users who have access to the folders in read only mode');

        it('should be accessible for all the users who have been explicitly invated and the user who created the loodle in administration mode');

    });

    describe('create a loodle in a group', function () {

        it('should create a loodle type content in OAE');

        it('should create a loodle in the loodle application');

        it('should be accessible for all the users who are part of the group in the administration mode');

        it('should be accessible for all the users who have been explicitly invated and the user who created the loodle in administration mode');

    });

    describe('create a loodle in many groups', function () {

        it('should create a loodle type content in OAE');

        it('should create a loodle in the loodle application');

        it('should be accessible for all the users who are part of the groups in the administration mode');

        it('should add only one time the users who have multiple access to the loodle');

        it('should be accessible for all the users who have been explicitly invated and the user who created the loodle in administration mode');

    });

    describe('create a loodle in folders and groups', function () {

        it('should create a loodle type content in OAE');

        it('should create a loodle in the loodle application');

        it('should be accessible for all the users who have access to the folders in read only mode');

        it('should be accessible for all the users who are part of the groups in the administration mode');

        it('should add only one time the users who have multiple access to the loodle and add them in the "higher" mode');

        it('should be accessible for all the users who have been explicitly invated and the user who created the loodle in administration mode');

    });

});
