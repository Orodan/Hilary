var _ = require('underscore');
var assert = require('assert');
var temp = require('temp');
var async = require('async');

var Cassandra = require('oae-util/lib/cassandra');
var RestAPI = require('oae-rest');
var TestsUtil = require('oae-tests');
var TaskQueue = require('oae-util/lib/taskqueue');
var PreviewConstants = require('oae-preview-processor/lib/constants');

describe('Loodle update', function () {

    describe('add another user to a loodle', function () {

        it('should give an access to the loodle to the user');

        it('should add the user as a participant in the loodle');

        it('should handle the case where the user already had an access to this loodle : he/she is not added again and keep/gain the "higher" role he/she can have');

    });

    describe('add another group to a loodle', function () {

        it('should give an access to the loodle to the group');

        it('should add all the users of the group as participants in the loodle');

        it('should handle the case where the added group has other groups as members : all the users must have an access to the loodle');

        it('should handle the case where the added group has other groups as members : all the users must be added as participants');

        it('should handle the case where one group user already has multiple access to the loodle : he/she is not added again and keep/gain the "higher" role he/she can have');

        it('should handle the case where a group member of the group added to the loodle has multiple access to it : the group members are not added again and keep/gain the "higher" role they can have')

    });

    describe('add a loodle to a folder', function () {

        it('should give an access in read only mode to the loodle to all the users of the folder');

        it('should not add the folder members as participants of the loodle');

        it('should handle the case where a group is a folder member : all group users must have access in read only mode to the loodle');

        it('should handle the case where a group is a folder member and one group user has another access to the loodle thanks to being invited personaly or through another group : he/she keeps being a participant in the loodle and keep the role he/she had');

        it('should handle the case where a group is a folder member and one group user has another access to the loodle through another folder : he/she keeps only having a read only access to the loodle without being added as participant');

        it('should handle the case where a group is a folder member and one of this group member is also a group which has another access to the loodle thanks to being invited personaly or through another group : the concerned group members keep being participants and keep the role they had');

        it('should handle the case where a group is a folder member and one of this group member is also a group which has another access to the loodle through another folder : the group keeps only having a read only access to the loodle without having its members added as participants');

    });

    describe('remove an user from a loodle', function () {

        it('should stop the access to the loodle for this user');

        it('should remove the user as a participant of the loodle');

        it('should handle the case where the user has another access to the loodle thanks to a group : the user keep an access to the loodle and keep being a participant in the loodle');

        it('should handle the case where the user has another access to the loodle thanks to a folder : the user keep an access in read only mode to the loodle but is removed as participant');

    });

    describe('remove a group from a loodle', function () {

        it('should stop the access for the group');

        it('should remove the group users as participants of the loodle');

        it('should handle the case where the group has another access to the loodle through another group : the group members keep being participants and have the same role as their group');

        it('should handle the case where the group has another access to the loodle through a folder : the group members are removed as participants in the loodle and have a read only access');

        it('should handle the case where one member of the removed group is another group : all groups must lose their access to the loodle and all groups users must be removed as participants of the loodle');

        it('should handle the case where one user of the removed group has another access to the loodle thanks to being invited personaly or through another group : the user keep an access to the loodle and keeps being a participant');

        it('should handle the case where one user of the removed group has another access to the loodle through a folder : the user is removed as a participant in the loodle and have a read only access');

        it('should handle the case where one member of the removed group is another group which has another access to the loodle thanks to being invited personaly or through another group : the group users keep an access to the loodle and keeps being participants');

        it('should handle the case where one member of the removed group is another group which has another access to the loodle through a folder : the group users are removed as participants in the loodle and have a read only access');

    });

    describe('remove a loodle from a folder', function () {

        it('should stop the access for all the folders members');

        it('should handle the case where an user of the folder has another access to the loodle thanks to being personaly invited or through another group : the user is still a participant in the loodle and keeps the same access');

        it('should handle the case where an user of the folder has another access to the loodle through another folder : the user is still not a participant in the loodle and keeps the same access');

        it('should handle the case where the folder has a group as a member which has another access to the loodle thanks to being personaly invited or through another group : the group users are still participants in the loodle and keeps the same access');

        it('should handle the case where the folder has a group as a member which has another access to the loodle through another folder : the group users are still not participants in the loodle and keep the same access');

    });

    describe('remove a user from a group', function () {

        it('should remove the access to the loodles of the group from the user');

        it('should remove the user as participant of all the loodles of the group');

        it('should handle the case where the user has another access to one or many loodles of the group thanks to being personaly invited or through another group : the user has his/her role updated but keep an access to these loodles and keeps being a participant');

        it('should handle the case where the user has another access to one or many loodles through a folder : the user keeps an access in read only mode but is no longer a participant in this loodle');

    });

    describe('remove a group B from a group A', function () {

        it('should remove the access of all the loodles of group A from group B');

        it('should remove all the members of group B as participants of all the loodles of group A');

        it('should handle the case where group B has another access to one or many loodles of group A thanks to being personaly invited or through another group : group B keeps an access to these loodles with an updated role according to its access and the users of group B are still participants');

        it('should handle the case where group B has another access to one or many loodles of group A through another folder : group B members keep an access in read only mode but are no longer participants to these loodles');

        it('should handle the case where group B has a user who has another access to one or many loodles of group A thanks to being personaly invited or through another group : the user keeps an access with an updated role according to its access and is still a participant of these loodles');

        it('should handle the case where group B has a user who has another access to one or many loodles of group A through another folder : the user keeps an access in read only mode but is no longer a participant to these loodles');

        it('should handle the case where group B has another group as a member which has another access to one or many loodles of group A thanks to being personaly invited or through another group : the group users keep an access with an updated role according to their access and are still participants of these loodles');

        it('should handle the case where group B has another group as a member which has another access to one or many loodles of group A through another folder : the group users keep an access in read only mode but are no longer a participant to these loodles');

    });

    describe('remove an user from a folder', function () {

        it('should remove the access to the loodles of the folder for the user');

        it('should handle the case where the user has another access to one or many loodles of the folder thanks to being personaly invited or through another group : the user keeps the same access and is still a participant of these loodles');

        it('should handle the case where the user has another access to one or many loodles of the folder through another folder : the user keeps the same access and is still not a participant of these loodles');

    });

    describe('remove a group from a folder', function () {

        it('should remove the access to the loodles of the folder for the group');

        it('should handle the case where the removed group has another access to one or many loodles of the folder thanks to being personaly invited or through another group : the group users keep the same access are still participants of these loodles');

        it('should handle the case where the removed group has another access to one or many loodles of the folder through another folder : the group users keep the same access are still not participants of these loodles');

        it('should handle the case where the removed group has an user who has another access to one or many loodles of the folder thanks to being personaly invited or through another group : the user keeps the same access and is still a participant in these loodles');

        it('should handle the case where the removed group has an user who has another access to one or many loodles of the folder through another folder : the user keeps the same access and is still not a participant in these loodles');

        it('should handle the case where the removed group has another group as member which has another access to one or many loodles of the folder thanks to being personaly invited or through another group : the group users keep the same access and are still participants in these loodles');

        it('should handle the case where the removed group has another group as member which has another access to one or many loodles of the folder through another folder : the group users keep the same access and are still not participants in these loodles');

    });

    describe('add another user to a group', function () {

        it('should give an access to all the loodles of the group to the new user');

        it('should add the user as a participant to all the loodles of the group');

        it('should handle the case where the added user already has another acces to one or many loodles of the group thanks to being personaly invited or through another group : the user is not added again as participant to these loodles and have an updated role according to his/her access');

        it('should handle the case where the added user already has another acces to one or many loodles of the group through another folder : the user is added as participant to these loodles and get the same access as the group');

    });

    describe('add another group B to a group A', function () {

        it('should give an access to all the loodles of group A to group B');

        it('should add as participants all the users of group B in all the loodles of group A');

        it('should handle the case where the group B has another access to one or many loodles of group A thanks to being personaly invited or through another group : the group users are not added again as participants in these loodles and keep/gain the "higher" role according to their access');

        it('should handle the case where the group B has another access to one or many loodles of group A through another folder : the group users are added as participants and get an access in these loodles');

        it('should handle the case where the group B has a user who has another access to one or many loodles of group A thanks to being personaly invited or through another group : the user is not added again as participant in these loodles and keeps/gains the "higher" role according to their access');

        it('should handle the case where the group B has a user who has another access to one or many loodles of group A through another folder : the user is added as participant in these loodles and get an access');

        it('should handle the case where the group B has another group as member which has another access to one or many loodles of group A thanks to being personaly invited or through another group : the group users are not added again as participants in these loodles and keep/gain the "higher" role according to their access');

        it('should handle the case where the group B has another group as member which has another access to one or many loodles of group A through another folder : the group get an access and the group users are added as participants in these loodles');

    });

    describe('add another user to a folder', function () {

        it('should give an access to all the loodles of the folder to the new user');

        it('should not add the user as participants in any of the loodles inside of the folder');

        it('should handle the case where the added user already has another access to one or many loodles of the folder thanks to being personaly invited or through another group : the user is still a participant in these loodles and keeps the same role');

        it('should handle the case where the added user already has another access to one or many loodles of the folder through another folder : the user is still not added as participant in these loodles and keeps the same read only access');

    });

    describe('add another group to a fodler', function () {

        it('should give an access to all the loodles of the folder to the new group');

        it('should not add the group users as participants in any of the loodles inside of the folder');

        it('should handle the case where the added group already has another access to one or many loodles of the folder thanks to being personaly invited or through another group : the group users are still participants in these loodles and keep the same role');

        it('should handle the case where the added group already has another access to one or many loodles of the folder through another folder : the group users are still not added as participants in these loodles and keep the same role');

        it('should handle the case where the added group has an user who already has another access to one or many loodles of the folder thanks to being personaly invited or through another group : the user is still a participant in these loodles and keep the same role');

        it('should handle the case where the added group has an user who already has another access to one or many loodles of the folder through another folder : the user is still not added as a participant in these loodles and keep the same role');

        it('should handle the case where the added group has another group as a member which already has another access to one or many loodles of the folder thanks to being personaly invited or through another group : the group users are still participants in these loodles and keep the same role');

        it('should handle the case where the added group has another group as a member which already has another access to one or many loodles of the folder through another folder : the group users are still not added as participants in these loodles and keep the same role');

    });

    describe('update the role of an user', function () {

        it('should correctly update the role of the user for the loodle');

        it('should handle the case where the user has another access to the loodle through a group : the user keeps/gains the "higher" role');

        it('should handle the case where the user has another access to the loodle through a folder : the user role is still updated');

    });

    describe('update the role of a group', function () {

        it('should correctly update the role of all the group users');

        it('should handle the case where the group as another group as a member : all users must have their role updated');

        it('should handle the case where the group has another access to the loodle through another group : the group keeps/gains the "higher" role');

        it('should handle the case where the group has another access to the loodle through another folder : the group role is still updated');

        it('should handle the case where the group has an user with another access to the loodle through another group : the user keeps/gains the "higher" role');

        it('should handle the case where the group has an user with another access to the loodle through another folder : the user role is still updated');

    });

    describe('add a schedule to a loodle', function () {

        it('should add correctly the schedule to the loodle');

        it('should create default votes about this schedule for all the participants of the loodle');

        it('should send a notification for all the participants of the loodle');

    });

    describe('delete a schedule from a loodle', function () {

        it('should delete correctly the schedule from the loodle');

        it('should delete all the votes associated with the schedule');

    });

    describe('edit the votes of a loodle', function () {

        it('should correctly edit the votes of the loodle');

        it('should send a notification to all the administrators of the loodle');

    });

});
