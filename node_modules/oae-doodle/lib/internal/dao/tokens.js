// Module dependencies
var Cassandra = require('oae-util/lib/cassandra');
var log = require('oae-logger').logger('oae-doodle-rest');
var http = require('http');
var crypto = require('crypto');

var config = require('../../config');

/**
 * Check if the token is already saved in db
 * 
 * @param  {String}   userId   	User id
 * @param  {Function} callback  Standard callback function
 * @return {Boolean}           	True if the token is already saved, False otherwise
 */
exports.isInDb = function (userId, callback) {

	var query = 'SELECT "token" FROM "LoodleTokenByUser" where "userId" = ?';
	var parameters = [
		userId
	];

	Cassandra.runQuery(query, parameters, function (err, result) {
		if (err)
			return callback(err);

		if (result.length === 0)
			return callback(null, false);

		return callback(null, true);
	});

}

/**
 * Get the token to communicate with the loodle application
 * 
 * @param  {String}   userId   	User id
 * @param  {Function} callback  Standard callback function
 * @return {[type]}            	token or error message
 */
exports.get = function (userId, callback) {

	var query = 'SELECT "token" FROM "LoodleTokenByUser" where "userId" = ?';
	var parameters = [
		userId
	];

	Cassandra.runQuery(query, parameters, function (err, result) {
		if (err)
			return callback(err);

		if (result.length === 0)
			return callback(null, 'No token has been found');

		return callback(null, Cassandra.rowToHash(result[0]).token);
	});

};

/**
 * Authenticate the user to the loodle application
 * 
 * @param  {String}   email     User email
 * @param  {Function} callback 	Standard callback function
 * @return {String}            	Token or error message
 */
exports.authenticate = function (email, callback) {


	var data = JSON.stringify({
		'email': email,
		'password': crypto.createHash('md5').update(email).digest('hex')
	});

	var options = {
		host: config.server.adress,
		port: config.server.port,
		path: '/api/authenticate',
		method:'POST',
		headers: {
			'Content-type': 'application/json',
			'Content-length': data.length
		},
	};

	var response = '';
	var req = http.request(options, function (res) {

		res.on('data', function (chunk) {
			response += chunk;
			console.log('Response : ', chunk);
		});

		res.on('end', function () {
			// Parse the response to json
			response = JSON.parse(response);

			if (response.type === 'error') {
				log().error("Response : ", response);
				return callback(response);
			}

			log().info("Response : ", response.data);
			return callback(null, response.data);			

		});
	});

	
	req.on('error', function (err) {
		log().error("Can't authenticate the user in the loodle application : ", err.message);
	});

	// Write data to request body
	req.write(data);
	req.end();

};

/**
 * Save the user token in db
 * 
 * @param  {String}   userId   	User id
 * @param  {String}   token    	User token
 * @param  {Function} callback 	Standard callback function
 * @return {Void}            	Null or error message
 */
exports.save = function (userId, token, callback) {

	log().info('save');

	var query = 'INSERT INTO "LoodleTokenByUser" ("userId", "token") values (?, ?)';
	var parameters = [
		userId, 
		token
	];

	Cassandra.runQuery(query, parameters, function (err) {
		if (err)
			return callback(err);

		return callback();
	});

};