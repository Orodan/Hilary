// Module dependencies
var Cassandra = require('oae-util/lib/cassandra');
var log = require('oae-logger').logger('oae-doodle-rest');
var http = require('http');
var crypto = require('crypto');

var config = require('../../config');

/**
 * Create a miror account in the loodle application
 * 
 * @param  {Object}   user    	User object
 * @param  {Function} callback 	Standard callback function
 * @return {Void}            	Null or error message
 */
exports.createAccount = function (user, callback) {

	if (typeof user.email === "undefined") {
		user.email = config.anonymous.number + config.anonymous.email;
		config.anonymous.number++;
	}

	var data = JSON.stringify({
		'email': user.email,
		'first_name': user.displayName.split(" ")[0],
		'last_name': user.displayName.split(" ")[1],
		'password': crypto.createHash('md5').update(user.email).digest('hex')
	});

	var options = {
		host: config.server.adress,
		port: config.server.port,
		path: '/api/user',
		method:'POST',
		headers: {
			'Content-type': 'application/json',
			'Content-length': data.length
		},
	};

	var response = '';
	var req = http.request(options, function (res) {

		res.on('data', function (chunk) {
			response += chunk;
			console.log('Response : ', chunk);
		});

		res.on('end', function () {
			// Parse the response to json
			response = JSON.parse(response);

			if (response.type === 'error') {
				log().error("Response : ", response);
				return callback(response);
			}

			log().info("Response : ", response.data);
			return callback();				

		});
	});

	
	req.on('error', function (err) {
		log().error("Can't create account in loodle application : ", err.message);
	});

	// Write data to request body
	req.write(data);
	req.end();
};

exports.isInLoodle = function (userId, loodleId, token, callback) {

	var options = {
        host: config.server.adress,
        port: config.server.port,
        path: '/api/user/getLoodles',
        method:'GET',
        headers: {
            'Content-type': 'application/json',
            'Authorization': 'Bearer ' + token
        },
    };

    var response = '';
    var req = http.request(options, function (res) {

        res.on('data', function (chunk) {
            response += chunk;
        });

        res.on('end', function () {

            // Parse the response to json
            response = JSON.parse(response);
            
            if (response.type === 'error') {
                log().error("Response : ", response);
                return callback(response);
            }

            log().info("Response : ", response.data);

            var inLoodle = false;
            for(var item in response.data) {
            	if (item === loodleId)
            		inLoodle = true;
            }

            return callback(null, inLoodle);

        });
    });

    req.on('error', function (err) {
        log().error("Can't get the loodles associated with the user : ", err.message);
    });

    req.end();

};

var get = exports.get = function (token, callback) {

		var options = {
	        host: config.server.adress,
	        port: config.server.port,
	        path: '/api/user',
	        method:'GET',
	        headers: {
	            'Content-type': 'application/json',
	            'Authorization': 'Bearer ' + token
	        },
	    };

	    var response = '';
	    var req = http.request(options, function (res) {

	        res.on('data', function (chunk) {
	            response += chunk;
	        });

	        res.on('end', function () {

	            // Parse the response to json
	            response = JSON.parse(response);
	            
	            if (response.type === 'error') {
	                log().error("Response : ", response);
	                return callback(response);
	            }

	            return callback(null, response.data);

	        });
	    });

	    req.on('error', function (err) {
	        log().error("Can't get the current user information : ", err.message);
	    });

	    req.end();

};