// Module dependencies
var accessTokensDAO = require('../internal/dao').accessTokens;

var http = require('http');
var querystring = require('querystring');

var log = require('oae-logger').logger('oae-doodle-rest');


exports.save = function (userId, accessToken, callback) {
	accessTokensDAO.save(userId, accessToken, callback);
};

exports.get = function (userId, callback) {
	accessTokensDAO.find(userId, callback);
};

exports.delete = function (userId, callback) {
	accessTokensDAO.delete(userId, callback);
};

exports.getAuthorizationCode = function (user, callback) {
	var username = "ririduck@gmail.com";
	var password = "test";
	var auth = "Basic " + new Buffer(username + ":" + password).toString("base64");

	var response_type = 'code';
	var client_id = 'fbbe0fdc-b7ae-48c7-a15a-a5d660e4c324';
	var redirect_uri = 'http://univlr.oae-dev.com/api/doodle/code';

	var options = {
		host: '127.0.0.1',
		port: 3000,
		path: '/api/authorize?response_type=' + response_type + '&client_id=' +  client_id + '&redirect_uri=' + redirect_uri,
		method:'GET',
		headers: {
			'Authorization': auth
		}
	};

	var response = '';
	var req = http.request(options, function (res) {
		// Redirection to the authorization code manager
		// The http manager does not handle redirection request by himself, you have to do it yourself
		if (res.statusCode > 300 && res.statusCode < 400 && res.headers.location) {
			http.get(res.headers.location, function (res) {

				res.on('data', function (chunk) {
					response += chunk;
				});

				res.on('end', function () {
					// Parse the response to json
					response = JSON.parse(response);

					if (response.authorization_code === undefined) {
						return callback('No authorization code found.');
					}

					return callback(null, response.authorization_code);
				});

				
			});
		}
		else {
			return callback('No redirection to get the authorization code');
		}
	});

	req.end();
};

exports.exchangeCodeForTokens = function (code, callback) {
	var grant_type = 'authorization_code',
		client_id = 'fbbe0fdc-b7ae-48c7-a15a-a5d660e4c324',
		client_secret = '8656b3ca-6534-4280-9fdd-d71acef76d47';

	var data = querystring.stringify({
	  'grant_type' : grant_type,
	  'code': code,
	  'client_id': client_id,
	  'client_secret': client_secret
	});

	var options = {
		host: '127.0.0.1',
		port: 3000,
		path: '/api/oauth/token',
		method:'POST',
		headers: {
			'Content-Type': 'application/x-www-form-urlencoded',
			'Content-length': data.length
		}
	};

	var response = '';
	var req = http.request(options, function (res) {

		res.on('data', function (chunk) {
			response += chunk;
		});

		res.on('end', function () {
			// Parse the response to json
			response = JSON.parse(response);

			if (response.access_token === undefined) {
				return callback('No access token found.');
			}

			return callback(null, {
				'access_token': response.access_token,
				'refresh_token': response.refresh_token
			});
		});
	});

	req.on('error', function (err) {
		log().error('Problem with the request : ', err.message);
		return callback(err);
	});

	// Write data to request body
	req.write(data);
	req.end();
};

exports.refresh = function (refresh_token, callback) {

	var grant_type = 'refresh_token',
		client_id = 'fbbe0fdc-b7ae-48c7-a15a-a5d660e4c324',
		client_secret = '8656b3ca-6534-4280-9fdd-d71acef76d47';

	var data = querystring.stringify({
	  'grant_type' : grant_type,
	  'refresh_token': refresh_token,
	  'client_id': client_id,
	  'client_secret': client_secret
	});

	var options = {
		host: '127.0.0.1',
		port: 3000,
		path: '/api/oauth/token',
		method:'POST',
		headers: {
			'Content-Type': 'application/x-www-form-urlencoded',
			'Content-length': data.length
		}
	};

	var response = '';
	var req = http.request(options, function (res) {

		res.on('data', function (chunk) {
			response += chunk;
		});

		res.on('end', function () {
			// Parse the response to json
			response = JSON.parse(response);

			if (response.access_token === undefined) {
				return callback('Error refreshing the access token');
			}

			return callback(null, response.access_token);
		});
	});

	req.on('error', function (err) {
		log().error('Problem with the request : ', err.message);
		return callback(err);
	});

	// Write data to request body
	req.write(data);
	req.end();
};



