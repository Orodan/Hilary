// Module dependencies
var async = require('async');
var DoodleAPI = require('./api');

var log = require('oae-logger').logger('content-rest');

var createDoodle = module.exports.createDoodle = function (ctx, name, description, callback) {

    var token_data = {};

    async.waterfall([
        async.apply(DoodleAPI.accessTokens.get, ctx.user().id),
        function _verifyAccessToken (access_token, end) {
            // No access token found, we ask for one to the Doodle-like app
            if (!access_token) {
                async.waterfall([
                    // Create the user on the Doodle-like app if he does not exists yet
                    async.apply(DoodleAPI.users.createIfNotExists, ctx.user()),
                    // Ask for the authoriation code
                    async.apply(DoodleAPI.accessTokens.getAuthorizationCode, ctx.user()),
                    // Exchange the authorization code for an access token
                    function _exchangeCodeForToken (code, done) {
                        DoodleAPI.accessTokens.exchangeCodeForTokens(code, function (err, result) {
                            if (err) { return done(err); }

                            token_data = result;
                            return done();
                        });
                    },
                    // Save access token in db
                    function _saveAccessToken (done) {
                        DoodleAPI.accessTokens.save(ctx.user().id, token_data.access_token, done);
                    },
                    // Save reresh token in db
                    function _saveRefreshToken (done) {
                        DoodleAPI.refreshTokens.save(ctx.user().id, token_data.refresh_token, done);
                    }

                ], function (err) {
                    if (err) { return callback(err); }
                    return end(null, token_data.access_token);
                });
            }
            // Found the access token in db
            else {
                return end(null, access_token);
            }
        },
        // Create the doodle
        function _createDoodle (access_token, end) {
            DoodleAPI.doodles.create(access_token, name, description, function (err, result) {
                if (err) {
                    if (err === 'Token expired') {
                        // Refresh the token and call the API again
                        async.waterfall([
                            async.apply(DoodleAPI.refreshTokens.get, ctx.user().id),
                            // Update the access token
                            function _refresh (refresh_token, finish) {
                                DoodleAPI.accessTokens.refresh(refresh_token, finish);
                            },

                            // Update access token in db
                            function _update(new_access_token, finish) {

                                async.parallel([
                                    async.apply(DoodleAPI.accessTokens.delete, ctx.user().id),
                                    async.apply(DoodleAPI.accessTokens.save, ctx.user().id, new_access_token)
                                ], function (err) {
                                    return finish(err);
                                });
                            },

                            async.apply(DoodleAPI.accessTokens.get, ctx.user().id),
                            function _createDoodle (access_token, finish) {
                                DoodleAPI.doodles.create(access_token, name, description, finish);
                            }
                        ], function (err) {
                            return end(err);
                        });
                    }
                    else {
                        return end(err);
                    }
                }

                log().info('Result of _createDoodle : ', result);
                return end(null, result);
            });    
        }
    ], function (err, result) {
        if (err) { return callback(err); }
        log().info('Final result : ', result);
        return callback(null, result);
        
    });
};

var saveIds = module.exports.saveIds = function (contentId, doodleId, callback) {

	log().info('oae-doodle/lib/oae');
	log().info('contentId : ', contentId);
	log().info('doodleId : ', doodleId);

	DoodleAPI.doodles.saveIds(contentId, doodleId, callback);
};

