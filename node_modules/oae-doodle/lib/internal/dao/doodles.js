// Module dependencies
var Cassandra = require('oae-util/lib/cassandra');
var log = require('oae-logger').logger('oae-doodle-rest');
var http = require('http');
var request = require('request');
var async = require('async');

var config = require('../../config');

var UserDAO = require('./users');

exports.get = function (loodleId, token, callback) {

    var options = {
        host: config.server.adress,
        port: config.server.port,
        path: '/api/loodle/' + loodleId,
        method: 'GET',
        headers: {
            'Content-type': 'application/json',
            'Authorization': 'Bearer ' + token
        }
    }

    var response = '';
    var req = http.request(options, function (res) {

        res.on('data', function (chunk) {
            response += chunk;
        });

        res.on('end', function () {
            response = JSON.parse(response);

            if (response.type === 'error') {
                log().error("Response : ", response);
                return callback(response);
            }

            return callback(null, response.data);
        });

    });

    req.on('error', function (err) {
        log().error("Can't create the loodle in the loodle application : ", err.message);
    });

    req.end();

};

/**
 * Create the loodle in the loodle application
 *
 * @param  {String}     name                    Name of the loodle
 * @param  {String}     description             Description of the loodle
 * @param  {Function}   callback                Standard callback function
 */
exports.createLoodle = function (token, name, description, callback) {

    var data = JSON.stringify({
        'name': name,
        'description': description
    });

    var options = {
        host: config.server.adress,
        port: config.server.port,
        path: '/api/loodle',
        method:'POST',
        headers: {
            'Content-type': 'application/json',
            'Content-length': Buffer.byteLength(data),
            'Authorization': 'Bearer ' + token
        }
    };

    var response = '';
    var req = http.request(options, function (res) {

        res.on('data', function (chunk) {
            response += chunk;
        });

        res.on('end', function () {
            // Parse the response to json
            response = JSON.parse(response);

            if (response.type === 'error') {
                log().error("Response : ", response);
                return callback(response);
            }

            return callback(null, response.data.id);

        });
    });


    req.on('error', function (err) {
        log().error("Can't create the loodle in the loodle application : ", err.message);
    });

    // Write data to request body
    req.write(data);
    req.end();

};

/**
 * Get loodle id from content id
 *
 * @param  {String}   contentId  Content id
 * @param  {Function} callback   Standard callback function
 * @return {String}              Loodle id or error message
 */
exports.getLoodleId = function (contentId, callback) {

    var query = 'SELECT "loodleId" FROM "LoodleIdByContent" WHERE "contentId" = ?';
    var parameters = [
        contentId
    ];

    Cassandra.runQuery(query, parameters, function (err, result) {
        if (err)
            return callback(err);

        if (result.length === 0)
            return callback("No loodle id associated with this content id");

        log().info('loodleId : ' + Cassandra.rowToHash(result[0]).loodleId);

        return callback(null, Cassandra.rowToHash(result[0]).loodleId);
    });

};

/**
 * Call the loodle api to get the loodle data
 *
 * @param  {String}   loodleId  Loodle id
 * @param  {Function} callback  Standard callback function
 * @return {Object}             Loodle data object or error message
 */
exports.getLoodleData = function (token, loodleId, callback) {

    log().info('getLoodleData');

    var options = {
        host: config.server.adress,
        port: config.server.port,
        path: '/api/loodle/' + loodleId,
        method:'GET',
        headers: {
            'Content-type': 'application/json',
            'Authorization': 'Bearer ' + token
        },
    };

    var response = '';
    var req = http.request(options, function (res) {

        res.on('data', function (chunk) {
            response += chunk;
        });

        res.on('end', function () {
            // Parse the response to json
            response = JSON.parse(response);

            if (response.type === 'error') {
                log().error("Response : ", response);
                return callback(response);
            }

            return callback(null, response.data);

        });
    });


    req.on('error', function (err) {
        log().error("Can't create the loodle in the loodle application : ", err.message);
    });

    req.end();

};

/**
 * Save the match contentId - loodleId
 *
 * @param  {String}   contentId  Content id
 * @param  {String}   loodleId   Loodle id
 * @param  {Function} callback   Standard callback function
 * @return {Void}                Null or error message
 */
exports.saveMatch = function (contentId, loodleId, callback) {

    var query = 'INSERT INTO "LoodleIdByContent" ("contentId", "loodleId") values (?, ?)';
    var parameters = [
        contentId,
        loodleId
    ];

    Cassandra.runQuery(query, parameters, callback);
};

/**
 * Delete loodle in loodle application
 *
 * @param  {String}   token      Access token to communicate with the loodle application
 * @param  {String}   contentId  Content id
 * @param  {Function} callback   Standard callback function
 * @return {Void}                Null or error message
 */
exports.deleteLoodle = function (token, loodleId, callback) {

    var options = {
        host: config.server.adress,
        port: config.server.port,
        path: '/api/loodle/' + loodleId,
        method:'DELETE',
        headers: {
            'Content-type': 'application/json',
            'Authorization': 'Bearer ' + token
        },
    };

    var response = '';
    var req = http.request(options, function (res) {

        res.on('data', function (chunk) {
            response += chunk;
        });

        res.on('end', function () {
            // Parse the response to json
            response = JSON.parse(response);

            if (response.type === 'error') {
                log().error("Response : ", response);
                return callback(response);
            }

            return callback(null);

        });
    });

    req.on('error', function (err) {
        log().error("Can't delete the loodle in the loodle application : ", err.message);
    });

    req.end();

};

/**
 * Add the specified user to the specified loodle
 *
 * @param currentUser
 * @param loodleId
 * @param userId
 * @param callback
 */
var addUserToLoodle = exports.addUserToLoodle = function (currentUser, loodleId, userId, callback) {

    var currentUserToken,
        userToAddToken,
        user;

    // TO DO : recuperation of the current user token and the user to add token can be done parallely

    async.series([
        // Get the token of the current user
        function getCurrentUserToken (done) {
            UserDAO.getToken(currentUser.id, function (err, data) {
                if (err) return done(err);

                currentUserToken = data;
                return done();
            });
        },
        // Get the token of the user to add
        function getUserToAddToken (done) {
            UserDAO.getToken(userId, function (err, data) {
                if (err) return done(err);

                userToAddToken = data;
                return done();
            });
        },
        // Get the user information (from the mirror account in the loodle application, we need it's id)
        function getUserToAddMirrorAccountInfo (done) {
            getUserInfo(userToAddToken, function (err, data) {
                if (err) return done(err);

                user = data;
                return done();
            })
        },
        // Add the specified user to the loodle
        function addUser (done) {
            _addUser(loodleId, user.id, userToAddToken, done);
        }
    ], callback);

};

var addUser = exports.addUser = function (loodleId, adminToken, token, callback) {

    // Get the user informations thanks to the token
    getUserInfo(token, function (err, user) {
        if (err) { return callback(err); }

        // Add the user to the specified loodle
        _addUser(loodleId, user.id, adminToken, callback);
    });
};

var _addUser = exports._addUser = function (loodleId, userId, token, callback) {

    log().info('_addUser');

    var options = {
        host: config.server.adress,
        port: config.server.port,
        path: '/api/loodle/' + loodleId + '/user/' + userId,
        method:'POST',
        headers: {
            'Content-type': 'application/json',
            'Authorization': 'Bearer ' + token
        },
    };

    var response = '';
    var req = http.request(options, function (res) {

        res.on('data', function (chunk) { response += chunk; });

        res.on('end', function () {

            log().info('response.statusCode : ', response.statusCode);
            log().info('response : ', response);

            // Parse the response to json
            response = JSON.parse(response);

            if (response.type === 'error') {
                log().error("Response : ", response);
                return callback(response.data);
            }
            else
                return callback();
        });
    });

    req.on('error', function (err) {
        log().error("Can't add the user to the specified loodle : ", err.message);
    });

    req.end();

};

var getUserInfo = exports.getUserInfo = function (token, callback) {

    var options = {
        host: config.server.adress,
        port: config.server.port,
        path: '/api/user',
        method:'GET',
        headers: {
            'Content-type': 'application/json',
            'Authorization': 'Bearer ' + token
        },
    };

    var response = '';
    var req = http.request(options, function (res) {

        res.on('data', function (chunk) { response += chunk; });

        res.on('end', function () {

            // Parse the response to json
            response = JSON.parse(response);

            if (response.type === 'error') {
                log().error("Response : ", response);
                return callback(response.data);
            }

            return callback(null, response.data);
        });
    });

    req.on('error', function (err) {
        log().error("Can't get user informations : ", err.message);
    });

    req.end();

};

var addSchedule = exports.addSchedule = function (loodleId, schedule, locale, token, callback) {

    var options = {
        host: config.server.adress,
        port: config.server.port,
        path: '/api/loodle/' + loodleId + '/schedule',
        method:'POST',
        headers: {
            'Content-type': 'application/json',
            'Authorization': 'Bearer ' + token
        },
    };

    locale = locale.split('_')[0];

    var postData = JSON.stringify({
        'begin_time': schedule.begin_time,
        'end_time': schedule.end_time,
        'language': locale
    });

    var response = '';
    var req = http.request(options, function (res) {

        res.on('data', function (chunk) { response += chunk; });

        res.on('end', function () {

            // Parse the response to json
            response = JSON.parse(response);

            log().info('response : ', response);

            if (response.type === 'error') {
                log().error("Response : ", response);
                return callback(response.data);
            }

            return callback(null, response.data);
        });

    });

    req.on('error', function (err) {
        log().error("Can't add schedule to the loodle : ", err.message);
    });

    req.write(postData);
    req.end();

};

var deleteSchedule = exports.deleteSchedule = function (loodleId, scheduleId, token, callback) {

    var options = {
        host: config.server.adress,
        port: config.server.port,
        path: '/api/loodle/' + loodleId + '/schedule/' + scheduleId,
        method:'DELETE',
        headers: {
            'Content-type': 'application/json',
            'Authorization': 'Bearer ' + token
        },
    };

    var response = '';
    var req = http.request(options, function (res) {

        res.on('data', function (chunk) { response += chunk; });

        res.on('end', function () {

            // Parse the response to json
            response = JSON.parse(response);

            log().info('response : ', response);

            if (response.type === 'error') {
                log().error("Response : ", response);
                return callback(response.data);
            }

            return callback();
        });

    });

    req.end();

};

var updateVotes = exports.updateVotes = function (token, loodleId, votes, callback) {

    log().info('updateVotes');
    log().info('votes : ', votes);

    var data = [];

    async.forEachOf(votes, function (value, key, end) {

        data.push({id: key, vote: value});
        return end();

    }, function (err) {
        console.log('err : ', err);
        if (err) return callback(err);

        console.log('data : ', data);

        var options = {
            host: config.server.adress,
            port: config.server.port,
            path: '/api/loodle/' + loodleId + '/votes',
            method:'PUT',
            headers: {
                'Content-type': 'application/json',
                'Authorization': 'Bearer ' + token
            },
        };

        var response = '';
        var req = http.request(options, function (res) {

            res.on('data', function (chunk) { response += chunk; });

            res.on('end', function () {

                // Parse the response to json
                response = JSON.parse(response);

                if (response.type === 'error') {
                    log().error("Response : ", response);
                    return callback(response.data);
                }
                else
                    return callback();
            });

        });

        req.on('error', function (err) {
            log().error("Can't update votes : ", err.message);
        });

        req.write(JSON.stringify(data));
        req.end();
    });

};
